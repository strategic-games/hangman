{"Structs/SortedSet.html#/s:7Hangman9SortedSetV14CollectionTypea":{"name":"CollectionType","abstract":"<p>The type of the wrapped collection which holds the elements</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVACyxGycfc":{"name":"init()","abstract":"<p>create an empty sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV12arrayLiteralACyxGxd_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Create a sorted set from an array literal, sorting its content</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV11descriptionSSvp":{"name":"description","abstract":"<p>A textual description of the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV16debugDescriptionSSvp":{"name":"debugDescription","abstract":"<p>A textual description of the SortedSet (for debugging)</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:Sl5IndexQa":{"name":"Index","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV10startIndexSivp":{"name":"startIndex","abstract":"<p>The position of the first element in the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV8endIndexSivp":{"name":"endIndex","abstract":"<p>The position after the last element in the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV5index5afterS2i_tF":{"name":"index(after:)","abstract":"<p>The position after the given index</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV5index6beforeS2i_tF":{"name":"index(before:)","abstract":"<p>The position before the given index</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVyxSicip":{"name":"subscript(_:)","abstract":"<p>Accesses the element at the given position</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVys10ArraySliceVyxGSnySiGcip":{"name":"subscript(_:)","abstract":"<p>Accesses a contiguous subrange of the array’s elements</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:Sl7isEmptySbvp":{"name":"isEmpty","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV5index2ofSb5found_SiADtx_tF":{"name":"index(of:)","abstract":"<p>Return the index of the given element using binary search</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV8containsySbxF":{"name":"contains(_:)","abstract":"<p>Indicate if the given element is contained in the sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV3minxSgyF":{"name":"min()","abstract":"<p>Return the minimum element in the sorted set, its first element</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV3maxxSgyF":{"name":"max()","abstract":"<p>Return the maximum element in the sorted set, its last element</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6insertySb8inserted_x17memberAfterInserttxF":{"name":"insert(_:)","abstract":"<p>Insert an element into the sorted set if not already present</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6update4withxSgx_tF":{"name":"update(with:)","abstract":"<p>Insert an element inconditionally</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6removeyxSgxF":{"name":"remove(_:)","abstract":"<p>Remove an element from a sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6remove2atxSgSi_tF":{"name":"remove(at:)","abstract":"<p>Remove the element at a given position</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6filteryACyxGSbxXEF":{"name":"filter(_:)","abstract":"<p>Return a sorted set containing the elements of this set that satisfy the given predicate</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV5unionyACyxGAEF":{"name":"union(_:)","abstract":"<p>Return a new sorted set containing the elements of this and another set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV9formUnionyyACyxGF":{"name":"formUnion(_:)","abstract":"<p>Add the elements of the given sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV12intersectionyACyxGAEF":{"name":"intersection(_:)","abstract":"<p>Return a new set containing the elements that are common to this and the given set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV16formIntersectionyyACyxGF":{"name":"formIntersection(_:)","abstract":"<p>Removes the elements of this set that aren’t also in the given set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV19symmetricDifferenceyACyxGAEF":{"name":"symmetricDifference(_:)","abstract":"<p>Return a new set with the elements that are either in this or in the given set, but not in both</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV23formSymmetricDifferenceyyACyxGF":{"name":"formSymmetricDifference(_:)","abstract":"<p>Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVAASeRzSERzrlE4fromACyxGs7Decoder_p_tKcfc":{"name":"init(from:)","abstract":"<p>Creates a sorted set by decoding from the given decoder</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVAASeRzSERzrlE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","abstract":"<p>Encode a sorted set into the given encoder</p>","parent_name":"SortedSet"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV2idSSvp":{"name":"id","abstract":"<p>A unique id for the player</p>","parent_name":"RandomPlayer"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV10vocabularyAA5RadixCvp":{"name":"vocabulary","abstract":"<p>The player&rsquo;s vocabulary</p>","parent_name":"RandomPlayer"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV2id10vocabularyACSSSg_AA5RadixCtcfc":{"name":"init(id:vocabulary:)","abstract":"<p>Initialize a new player with a given id and vocabulary</p>","parent_name":"RandomPlayer"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV4deal4withAA9BegriffixV4MoveVSgAG_tF":{"name":"deal(with:)","abstract":"<p>Undocumented</p>","parent_name":"RandomPlayer"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV5match_5placeSaySays7UnicodeO6ScalarVGGAA9BegriffixV_AM5PlaceVtF":{"name":"match(_:place:)","abstract":"<p>Find the words that could be inserted at the given place</p>","parent_name":"RandomPlayer"},"Structs/Area.html#/s:7Hangman4AreaV4rowsSnySiGvp":{"name":"rows","abstract":"<p>The row and column ranges</p>","parent_name":"Area"},"Structs/Area.html#/s:7Hangman4AreaV7indicesSnySiG_AEtvp":{"name":"indices","abstract":"<p>Undocumented</p>","parent_name":"Area"},"Structs/Area.html#/s:7Hangman4AreaV5countSivp":{"name":"count","abstract":"<p>How many points this would cover</p>","parent_name":"Area"},"Structs/Area.html#/s:7Hangman4AreaV5startAA5PointVvp":{"name":"start","abstract":"<p>The upper left point in this area</p>","parent_name":"Area"},"Structs/Area.html#/s:7Hangman4AreaV3endAA5PointVvp":{"name":"end","abstract":"<p>The lower right point in this area</p>","parent_name":"Area"},"Structs/Area.html#/s:7Hangman4AreaV4rows7columnsACSnySiG_AFtcfc":{"name":"init(rows:columns:)","abstract":"<p>Initialize a new area</p>","parent_name":"Area"},"Structs/Area.html#/s:7Hangman4AreaV8contains5pointSbAA5PointV_tF":{"name":"contains(point:)","abstract":"<p>Indicates if an area contains the given point</p>","parent_name":"Area"},"Structs/Point.html#/s:7Hangman5PointV3rowSivp":{"name":"row","abstract":"<p>The coordinates, starting from zero</p>","parent_name":"Point"},"Structs/Point.html#/s:7Hangman5PointV3row6columnACSi_Sitcfc":{"name":"init(row:column:)","abstract":"<p>Initialize a new point</p>","parent_name":"Point"},"Structs/Matrix.html#/s:7Hangman6MatrixV4rowsSivp":{"name":"rows","abstract":"<p>The number of rows and columns</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV11descriptionSSvp":{"name":"description","abstract":"<p>A textual representation</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV5countSivp":{"name":"count","abstract":"<p>The total number of elements</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV6valuesSayxGvp":{"name":"values","abstract":"<p>The elements as rowwise array</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV6values4rows7columnsACyxGSayxG_S2itcfc":{"name":"init(values:rows:columns:)","abstract":"<p>Initialize new with values and dimensions</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV6values4areaACyxGSayxG_AA4AreaVtcfc":{"name":"init(values:area:)","abstract":"<p>Initialize with values and the dimensions of a given area</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV6valuesACyxGSgSaySayxGG_tcfc":{"name":"init(values:)","abstract":"<p>Initialize with a nested array</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV9repeating4rows7columnsACyxGx_S2itcfc":{"name":"init(repeating:rows:columns:)","abstract":"<p>Initialize with a repeated value and dimensions</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV9repeating4areaACyxGx_AA4AreaVtcfc":{"name":"init(repeating:area:)","abstract":"<p>Initialize with a repeated value and dimensions from a given area</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVyxSi_Sitcip":{"name":"subscript(_:_:)","abstract":"<p>Access the element at the given position</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVyxAA5PointVcip":{"name":"subscript(_:)","abstract":"<p>Access the element at the given point</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVyACyxGSnySiG_AEtcip":{"name":"subscript(_:_:)","abstract":"<p>Access the elements in the given ranges</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVySays10ArraySliceVyxGGSnySiG_AHtcip":{"name":"subscript(_:_:)","abstract":"<p>Access the elements in the given ranges</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVySayxGSnySiG_AEtcip":{"name":"subscript(_:_:)","abstract":"<p>Access the elements in the given ranges</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVyACyxGAA4AreaVcip":{"name":"subscript(_:)","abstract":"<p>Access the elements in the given area</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVySays10ArraySliceVyxGGAA4AreaVcip":{"name":"subscript(_:)","abstract":"<p>Access the elements in the given area</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV3rowys10ArraySliceVyxGSiF":{"name":"row(_:)","abstract":"<p>Returns the elements in the given row</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV6columnySayxGSiF":{"name":"column(_:)","abstract":"<p>Returns the elements in the given column</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV7rowwise2inSaySayxGGSnySiGSg_tF":{"name":"rowwise(in:)","abstract":"<p>Get the elements row by row</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV7colwise2inSaySayxGGSnySiGSg_tF":{"name":"colwise(in:)","abstract":"<p>Get the elements column by column</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV5index3row6columnS2i_SitF":{"name":"index(row:column:)","abstract":"<p>Convert coordinates to array index</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV5index5pointSiAA5PointV_tF":{"name":"index(point:)","abstract":"<p>Convert point to array index</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV5point2ofAA5PointVSi_tF":{"name":"point(of:)","abstract":"<p>Convert array index to point</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV7indices4rows7columnsSaySnySiGGAG_AGtF":{"name":"indices(rows:columns:)","abstract":"<p>Convert 2D ranges to array indices</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV7isValid3row6columnSbSi_SitF":{"name":"isValid(row:column:)","abstract":"<p>Indicate if a matrix contains the given coordinates</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV7isValid4rows7columnsSbSnySiG_AGtF":{"name":"isValid(rows:columns:)","abstract":"<p>Indicate if a matrix contains the given 2D range</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAAs7UnicodeO6ScalarVSgRszlE11descriptionSSvp":{"name":"description","abstract":"<p>A textual 2D representation with dot for empty fields</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAAs7UnicodeO6ScalarVSgRszlEyACyAHGSgSScfc":{"name":"init(_:)","abstract":"<p>Initialize from 2D description</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzlE1moiyACyxGAE_AEtFZ":{"name":"*(_:_:)","abstract":"<p>Elementwise matrix multiplication</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzlE5conv2yACyxGAEF":{"name":"conv2(_:)","abstract":"<p>2D convolution with numeric elements</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzlE6extendyACyxGAEF":{"name":"extend(_:)","abstract":"<p>Extend conv2 matrix with a given kernel</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzlE6dilateyACyxGAEF":{"name":"dilate(_:)","abstract":"<p>Extend and dilate conv2 matrix with a given kernel</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzlE6invert3maxACyxGx_tF":{"name":"invert(max:)","abstract":"<p>Recode the matrix values by subtracting them from a given maximum value</p>","parent_name":"Matrix"},"Structs/Begriffix/Phase.html#/s:7Hangman9BegriffixV5PhaseO10RestrictedyAeC9DirectionOcAEmF":{"name":"Restricted(_:)","abstract":"<p>Players must write words with at least four characters, starting player must write horizontally, and opponent must write vertically</p>","parent_name":"Phase"},"Structs/Begriffix/Phase.html#/s:7Hangman9BegriffixV5PhaseO7LiberalyA2EmF":{"name":"Liberal","abstract":"<p>Any words and directions are allowed</p>","parent_name":"Phase"},"Structs/Begriffix/Phase.html#/s:7Hangman9BegriffixV5PhaseO8KnockOutyA2EmF":{"name":"KnockOut","abstract":"<p>not yet implemented</p>","parent_name":"Phase"},"Structs/Begriffix/Move.html#/s:7Hangman9BegriffixV4MoveV5placeAC5PlaceVvp":{"name":"place","abstract":"<p>Where the word should be written</p>","parent_name":"Move"},"Structs/Begriffix/Move.html#/s:7Hangman9BegriffixV4MoveV4wordSays7UnicodeO6ScalarVGvp":{"name":"word","abstract":"<p>The word to write in this move</p>","parent_name":"Move"},"Structs/Begriffix/Move.html#/s:7Hangman9BegriffixV4MoveV6placesSDyAC5PlaceVSaySays7UnicodeO6ScalarVGGGSgvp":{"name":"places","abstract":"<p>The collection which the move has been selected from</p>","parent_name":"Move"},"Structs/Begriffix/Move.html#/s:7Hangman9BegriffixV4MoveV5place4word6placesAeC5PlaceV_Says7UnicodeO6ScalarVGSDyAJSayAOGGSgtcfc":{"name":"init(place:word:places:)","abstract":"<p>Initialize a move</p>","parent_name":"Move"},"Structs/Begriffix/Place.html#/s:7Hangman9BegriffixV5PlaceV5startAA5PointVvp":{"name":"start","abstract":"<p>The position of the first letter</p>","parent_name":"Place"},"Structs/Begriffix/Place.html#/s:7Hangman9BegriffixV5PlaceV9directionAC9DirectionOvp":{"name":"direction","abstract":"<p>The writing direction</p>","parent_name":"Place"},"Structs/Begriffix/Place.html#/s:7Hangman9BegriffixV5PlaceV5countSivp":{"name":"count","abstract":"<p>The word length</p>","parent_name":"Place"},"Structs/Begriffix/Place.html#/s:7Hangman9BegriffixV5PlaceV5start9direction5countAeA5PointV_AC9DirectionOSitcfc":{"name":"init(start:direction:count:)","abstract":"<p>Initialize a new place</p>","parent_name":"Place"},"Structs/Begriffix/Place.html#/s:7Hangman9BegriffixV5PlaceV4areaAA4AreaVvp":{"name":"area","abstract":"<p>An area representation of the place for inserting into matrices</p>","parent_name":"Place"},"Structs/Begriffix/Place.html#/s:7Hangman9BegriffixV5PlaceV6kernelAA6MatrixVySiGvp":{"name":"kernel","abstract":"<p>A matrix filled with 1 according to the area</p>","parent_name":"Place"},"Structs/Begriffix/Direction.html#/s:7Hangman9BegriffixV9DirectionO10HorizontalyA2EmF":{"name":"Horizontal","abstract":"<p>From left to right</p>","parent_name":"Direction"},"Structs/Begriffix/Direction.html#/s:7Hangman9BegriffixV9DirectionO8VerticalyA2EmF":{"name":"Vertical","abstract":"<p>from top to bottom</p>","parent_name":"Direction"},"Structs/Begriffix/Direction.html#/s:7Hangman9BegriffixV9DirectionO6kernelyAA6MatrixVySiGSiF":{"name":"kernel(_:)","abstract":"<p>Return a kernel according to this direction and a given length</p>","parent_name":"Direction"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV6Lettera":{"name":"Letter","abstract":"<p>The type of a letter, can be written at one board position</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV4Worda":{"name":"Word","abstract":"<p>The type of a word which is a sequence of letters</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV7Patterna":{"name":"Pattern","abstract":"<p>A sequence of optional letters, nil means that any letter can be used there</p>","parent_name":"Begriffix"},"Structs/Begriffix/Direction.html":{"name":"Direction","abstract":"<p>The writing direction</p>","parent_name":"Begriffix"},"Structs/Begriffix/Place.html":{"name":"Place","abstract":"<p>A place where a word could be written</p>","parent_name":"Begriffix"},"Structs/Begriffix/Move.html":{"name":"Move","abstract":"<p>A begriffix move</p>","parent_name":"Begriffix"},"Structs/Begriffix/Phase.html":{"name":"Phase","abstract":"<p>game phases depending on the progress</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV12startLettersSays12StaticStringVGvpZ":{"name":"startLetters","abstract":"<p>Some human-generated start letters</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BoardGameP5board0B0Qzvp":{"name":"board","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV7starterAA6Player_pvp":{"name":"starter","abstract":"<p>The first player in a turn</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV8opponentAA6Player_pvp":{"name":"opponent","abstract":"<p>The second player in a turn</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV4turnSivp":{"name":"turn","abstract":"<p>How many times the starter and opponent have provided a move</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV6playerAA6Player_pvp":{"name":"player","abstract":"<p>The player who would be asked for the next move</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV5endedSbvp":{"name":"ended","abstract":"<p>Indicates if the game has ended</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV5phaseAC5PhaseOvp":{"name":"phase","abstract":"<p>The current game phase which is derived from turn</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV12startLetters7starter8opponentACSgSaySays7UnicodeO6ScalarVSgGG_AA6Player_pAaO_ptcfc":{"name":"init(startLetters:starter:opponent:)","abstract":"<p>Initialize a new begriffix game with given players</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV7starter8opponentACSgAA6Player_p_AaG_ptcfc":{"name":"init(starter:opponent:)","abstract":"<p>Initialize a new game with given players and randomly selected start letters</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV4nextAC_AC4MoveVtSgyF":{"name":"next()","abstract":"<p>Advance the game for one move</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV6placesSayAC5PlaceVGSgyF":{"name":"places()","abstract":"<p>Returns a complete array of allowed places, depending on current phase</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV4scan9direction5countSayAA5PointVGAC9DirectionO_SitF":{"name":"scan(direction:count:)","abstract":"<p>Return every position where words with given direction and length could be inserted</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV5words12orthogonalTo4wordSaySays7UnicodeO6ScalarVGGAC5PlaceV_AKtF":{"name":"words(orthogonalTo:word:)","abstract":"<p>Return the words crossing the given place after inserting a given word</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV8contains5placeSbAC5PlaceV_tF":{"name":"contains(place:)","abstract":"<p>Indicate if the given place is usable</p>","parent_name":"Begriffix"},"Structs/Begriffix.html":{"name":"Begriffix","abstract":"<p>A begriffix game</p>"},"Structs/Matrix.html":{"name":"Matrix","abstract":"<p>A 2D grid for game boards etc.</p>"},"Structs/Point.html":{"name":"Point","abstract":"<p>A 2D index</p>"},"Structs/Area.html":{"name":"Area","abstract":"<p>A 2D index range</p>"},"Structs/RandomPlayer.html":{"name":"RandomPlayer","abstract":"<p>A Begriffix player that selects by random</p>"},"Structs/SortedSet.html":{"name":"SortedSet","abstract":"<p>A collection of unique elements which keeps itself sorted</p>"},"Protocols/Player.html#/s:7Hangman6PlayerP2idSSvp":{"name":"id","abstract":"<p>Undocumented</p>","parent_name":"Player"},"Protocols/Player.html#/s:7Hangman6PlayerP4deal4withAA9BegriffixV4MoveVSgAG_tF":{"name":"deal(with:)","abstract":"<p>Undocumented</p>","parent_name":"Player"},"Protocols/Player.html#/s:7Hangman6PlayerPAAE11descriptionSSvp":{"name":"description","abstract":"<p>A textual player description</p>","parent_name":"Player"},"Protocols/Player.html#/s:7Hangman6PlayerPAAE4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Get a hash value from a player&rsquo;s id</p>","parent_name":"Player"},"Protocols/DyadicGame.html#/s:7Hangman10DyadicGameP7starterAA6Player_pvp":{"name":"starter","abstract":"<p>The player who starts the game</p>","parent_name":"DyadicGame"},"Protocols/DyadicGame.html#/s:7Hangman10DyadicGameP8opponentAA6Player_pvp":{"name":"opponent","abstract":"<p>The responding player</p>","parent_name":"DyadicGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP0B0Qa":{"name":"Board","abstract":"<p>A type that can act as a game board</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP4MoveQa":{"name":"Move","abstract":"<p>The move type of a game</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP5board0B0Qzvp":{"name":"board","abstract":"<p>A game board where values can be entered</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP4turnSivp":{"name":"turn","abstract":"<p>The turn counter</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP6playerAA6Player_pvp":{"name":"player","abstract":"<p>The current player</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html":{"name":"BoardGame","abstract":"<p>A type that can act as a board game</p>"},"Protocols/DyadicGame.html":{"name":"DyadicGame","abstract":"<p>A type that can act as a dyadic board game</p>"},"Protocols/Player.html":{"name":"Player","abstract":"<p>Undocumented</p>"},"Extensions/Array.html#/s:Sa7Hangmans7UnicodeO6ScalarVRszlE11descriptionSSvp":{"name":"description","abstract":"<p>The string representation of a radix label</p>","parent_name":"Array"},"Extensions/Collection.html#/s:Sl7HangmanSQ7ElementRpzrlE5index9diverging5IndexQzx_tF":{"name":"index(diverging:)","abstract":"<p>Returns the index where a collection diverges from another one</p>","parent_name":"Collection"},"Extensions/Sequence.html#/s:ST7HangmanSj7ElementRpzrlE3sumACyF":{"name":"sum()","abstract":"<p>Return the sum of all elements in a numeric sequence</p>","parent_name":"Sequence"},"Extensions/Sequence.html#/s:ST7HangmanSj7ElementRpzrlE1moiySayACGx_xtFZ":{"name":"*(_:_:)","abstract":"<p>Multiply two sequences elementwise</p>","parent_name":"Sequence"},"Extensions/Sequence.html#/s:ST7HangmanSj7ElementRpzrlE7prodSum3lhs3rhsACx_xtFZ":{"name":"prodSum(lhs:rhs:)","abstract":"<p>Multiply two sequences elementwise and sum up the products</p>","parent_name":"Sequence"},"Extensions/BidirectionalCollection.html#/s:SK7HangmanSQ7ElementRpzrlE7indices6around8surroundSny5IndexQzGAH_ACtF":{"name":"indices(around:surround:)","abstract":"<p>Returns the indices around a given index to return a slice that is surrounded by a given element</p>","parent_name":"BidirectionalCollection"},"Extensions/BidirectionalCollection.html":{"name":"BidirectionalCollection"},"Extensions/Sequence.html":{"name":"Sequence"},"Extensions/Collection.html":{"name":"Collection"},"Extensions/Array.html":{"name":"Array"},"Classes/Radix/CodingKeys.html#/s:7Hangman5RadixC10CodingKeysO5labelyA2EmF":{"name":"label","abstract":"<p>The key for the label property</p>","parent_name":"CodingKeys"},"Classes/Radix/CodingKeys.html#/s:7Hangman5RadixC10CodingKeysO5levelyA2EmF":{"name":"level","abstract":"<p>The key for the level property</p>","parent_name":"CodingKeys"},"Classes/Radix/CodingKeys.html#/s:7Hangman5RadixC10CodingKeysO10isTerminalyA2EmF":{"name":"isTerminal","abstract":"<p>The key for the isTerminal property</p>","parent_name":"CodingKeys"},"Classes/Radix/CodingKeys.html#/s:7Hangman5RadixC10CodingKeysO8childrenyA2EmF":{"name":"children","abstract":"<p>The key for the children property</p>","parent_name":"CodingKeys"},"Classes/Radix.html#/s:7Hangman5RadixC5Labela":{"name":"Label","abstract":"<p>Undocumented</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC12ChildrenTypea":{"name":"ChildrenType","abstract":"<p>The type of the child nodes collection</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Test equality of two nodes, respecting only the label</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC1loiySbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Test order of two nodes, respecting only the label</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC5labelSays7UnicodeO6ScalarVGvp":{"name":"label","abstract":"<p>The prefix of this node</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC5levelSivp":{"name":"level","abstract":"<p>The tree depth of this node</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC10isTerminalSbvp":{"name":"isTerminal","abstract":"<p>Indicates if this node contains the suffix of an inserted string</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6isLeafSbvp":{"name":"isLeaf","abstract":"<p>////////// Indicates if the node contains any child nodes</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6isRootSbvp":{"name":"isRoot","abstract":"<p>Undocumented</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC11descriptionSSvp":{"name":"description","abstract":"<p>A textual representation of the node</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Hash this node, respecting only its label</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC5label5level10isTerminal8childrenACSays7UnicodeO6ScalarVG_SiSbAA9SortedSetVyACGtcfc":{"name":"init(label:level:isTerminal:children:)","abstract":"<p>Create a node</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC4textACSS_tcfc":{"name":"init(text:)","abstract":"<p>Initialize a node and insert the fragments of a string split by a separator</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6insertyySSF":{"name":"insert(_:)","abstract":"<p>Insert a string into the tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6insertyyxSTRzSS7ElementRtzlF":{"name":"insert(_:)","abstract":"<p>Insert the elements of a given sequence into the tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6insert4text9separatorySays7UnicodeO6ScalarVG_AJtF":{"name":"insert(text:separator:)","abstract":"<p>Split a string by whitespace and insert the fragments into the tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6insertySb5added_AC4nodetSays7UnicodeO6ScalarVGF":{"name":"insert(_:)","abstract":"<p>Insert a new member into this node</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6removeyySSF":{"name":"remove(_:)","abstract":"<p>Remove a given string from this tree if present</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6removeyySays7UnicodeO6ScalarVGF":{"name":"remove(_:)","abstract":"<p>Remove a string from this node if present, and prune leaf nodes if present</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC8containsySbSSF":{"name":"contains(_:)","abstract":"<p>Undocumented</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC8containsySbSays7UnicodeO6ScalarVGF":{"name":"contains(_:)","abstract":"<p>Undocumented</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6searchSaySSGyF":{"name":"search()","abstract":"<p>Return a new array with the strings in this tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6search7patternSaySSGSS_tF":{"name":"search(pattern:)","abstract":"<p>Return a new array with the strings in this tree that satisfy the given pattern</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6search6prefixSaySays7UnicodeO6ScalarVGGAJ_tF":{"name":"search(prefix:)","abstract":"<p>Return an array with every inserted string in this node, the given prefix prepended</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6search6prefix7patternSaySays7UnicodeO6ScalarVGGAK_SayAJSgGtF":{"name":"search(prefix:pattern:)","abstract":"<p>Return an array with every inserted string in this node that match the given pattern, the given prefix prepended</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC7endNodeyACSgSays7UnicodeO6ScalarVGF":{"name":"endNode(_:)","abstract":"<p>Return the node which marks the end of a given string if present</p>","parent_name":"Radix"},"Classes/Radix/CodingKeys.html":{"name":"CodingKeys","abstract":"<p>The coding keys for serialization</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC4fromACs7Decoder_p_tKcfc":{"name":"init(from:)","abstract":"<p>Initialize a node from a decoder</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7Hangman5RadixC6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","abstract":"<p>Encode the node into an encoder</p>","parent_name":"Radix"},"Classes/Radix.html":{"name":"Radix","abstract":"<p>A radix tree node</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}