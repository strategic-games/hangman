{"Structs/SortedSet.html#/s:7HangMan9SortedSetV14CollectionTypea":{"name":"CollectionType","abstract":"<p>The type of the wrapped collection which holds the elements</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetVACyxGycfc":{"name":"init()","abstract":"<p>create an empty sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV12arrayLiteralACyxGxd_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Create a sorted set from an array literal, sorting its content</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV11descriptionSSvp":{"name":"description","abstract":"<p>A textual description of the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV16debugDescriptionSSvp":{"name":"debugDescription","abstract":"<p>A textual description of the SortedSet (for debugging)</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:Sl5IndexQa":{"name":"Index","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:Sl11SubSequenceQa":{"name":"SubSequence","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV10startIndexSivp":{"name":"startIndex","abstract":"<p>The position of the first element in the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV8endIndexSivp":{"name":"endIndex","abstract":"<p>The position after the last element in the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV5index5afterS2i_tF":{"name":"index(after:)","abstract":"<p>The position after the given index</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV5index6beforeS2i_tF":{"name":"index(before:)","abstract":"<p>The position before the given index</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetVyxSicip":{"name":"subscript(_:)","abstract":"<p>Accesses the element at the given position</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetVys10ArraySliceVyxGSnySiGcip":{"name":"subscript(_:)","abstract":"<p>Accesses a contiguous subrange of the array’s elements</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:Sl7isEmptySbvp":{"name":"isEmpty","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV5index2ofSb5found_SiADtx_tF":{"name":"index(of:)","abstract":"<p>Return the index of the given element using binary search</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV8containsySbxF":{"name":"contains(_:)","abstract":"<p>Indicate if the given element is contained in the sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV3minxSgyF":{"name":"min()","abstract":"<p>Return the minimum element in the sorted set, its first element</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV3maxxSgyF":{"name":"max()","abstract":"<p>Return the maximum element in the sorted set, its last element</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV6insertySb8inserted_x17memberAfterInserttxF":{"name":"insert(_:)","abstract":"<p>Insert an element into the sorted set if not already present</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV6update4withxSgx_tF":{"name":"update(with:)","abstract":"<p>Insert an element inconditionally</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV6removeyxSgxF":{"name":"remove(_:)","abstract":"<p>Remove an element from a sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV6remove2atxSgSi_tF":{"name":"remove(at:)","abstract":"<p>Remove the element at a given position</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV6filteryACyxGSbxXEF":{"name":"filter(_:)","abstract":"<p>Return a sorted set containing the elements of this set that satisfy the given predicate</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV5unionyACyxGAEF":{"name":"union(_:)","abstract":"<p>Return a new sorted set containing the elements of this and another set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV9formUnionyyACyxGF":{"name":"formUnion(_:)","abstract":"<p>Add the elements of the given sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV12intersectionyACyxGAEF":{"name":"intersection(_:)","abstract":"<p>Return a new set containing the elements that are common to this and the given set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV16formIntersectionyyACyxGF":{"name":"formIntersection(_:)","abstract":"<p>Removes the elements of this set that aren’t also in the given set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV19symmetricDifferenceyACyxGAEF":{"name":"symmetricDifference(_:)","abstract":"<p>Return a new set with the elements that are either in this or in the given set, but not in both</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetV23formSymmetricDifferenceyyACyxGF":{"name":"formSymmetricDifference(_:)","abstract":"<p>Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetVAASeRzSERzrlE4fromACyxGs7Decoder_p_tKcfc":{"name":"init(from:)","abstract":"<p>Creates a sorted set by decoding from the given decoder</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7HangMan9SortedSetVAASeRzSERzrlE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","abstract":"<p>Encode a sorted set into the given encoder</p>","parent_name":"SortedSet"},"Structs/SortedSet.html":{"name":"SortedSet","abstract":"<p>A collection of unique elements which keeps itself sorted</p>"},"Extensions/String/Divergence.html#/s:SS7HangManE10DivergenceO4fullyA2CmF":{"name":"full","abstract":"<p>No common prefix</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html#/s:SS7HangManE10DivergenceO4noneyA2CmF":{"name":"none","abstract":"<p>strings are completely equal</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html#/s:SS7HangManE10DivergenceO4leftyACSs_tcACmF":{"name":"left(suffix:)","abstract":"<p>The right string is a prefix of the left</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html#/s:SS7HangManE10DivergenceO5rightyACSs_tcACmF":{"name":"right(suffix:)","abstract":"<p>The left string is a prefix of the right</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html#/s:SS7HangManE10DivergenceO6partlyyACSs_S2stcACmF":{"name":"partly(prefix:leftSuffix:rightSuffix:)","abstract":"<p>Left and right string have a common prefix</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html":{"name":"Divergence","abstract":"<p>Possible degrees of divergence</p>","parent_name":"String"},"Extensions/String.html#/s:SS7HangManE1roiySSAAE10DivergenceOSS_SStFZ":{"name":"%(_:_:)","abstract":"<p>Return the degree of divergence of two given strings</p>","parent_name":"String"},"Extensions/String.html#/s:SS7HangManE1doiySs_S2stSS_SStFZ":{"name":"/(_:_:)","abstract":"<p>Return the common prefix of two strings and their diverging suffixes</p>","parent_name":"String"},"Extensions/String.html#/s:SS7HangManE7matchesySbSSF":{"name":"matches(_:)","abstract":"<p>Indicate if the string matches a given pattern</p>","parent_name":"String"},"Extensions/String.html":{"name":"String"},"Classes/Radix.html#/s:7HangMan5RadixCACycfc":{"name":"init()","abstract":"<p>Create an empty tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7HangMan5RadixC6insertyySSF":{"name":"insert(_:)","abstract":"<p>Insert a string into the tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7HangMan5RadixC6insertyyxSTRzSS7ElementRtzlF":{"name":"insert(_:)","abstract":"<p>Insert the elements of a given sequence into the tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7HangMan5RadixC6removeyySSF":{"name":"remove(_:)","abstract":"<p>Remove a given string from this tree if present</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7HangMan5RadixC8containsySbSSF":{"name":"contains(_:)","abstract":"<p>Indicate if a given string is present in the tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7HangMan5RadixC6searchSaySSGyF":{"name":"search()","abstract":"<p>Return a new array with the strings in this tree</p>","parent_name":"Radix"},"Classes/Radix.html#/s:7HangMan5RadixC5matchySaySSGSSF":{"name":"match(_:)","abstract":"<p>Return a new array with the strings in this tree that satisfy the given pattern</p>","parent_name":"Radix"},"Classes/Node.html#/s:7HangMan4NodeC12ChildrenTypea":{"name":"ChildrenType","abstract":"<p>The type of the child nodes collection</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC5labelSSvp":{"name":"label","abstract":"<p>The prefix of this node</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC5levelSivp":{"name":"level","abstract":"<p>The tree depth of this node</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC10isTerminalSbvp":{"name":"isTerminal","abstract":"<p>Indicates if this node contains the suffix of an inserted string</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC6isLeafSbvp":{"name":"isLeaf","abstract":"<p>////////// Indicates if the node contains any child nodes</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC_5level10isTerminalACSS_SiSbtcfc":{"name":"init(_:level:isTerminal:)","abstract":"<p>Create a node</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC3add6prefixACSS_tF":{"name":"add(prefix:)","abstract":"<p>Add a child node with given prefix</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC5split6prefix9keySuffixACSS_SStF":{"name":"split(prefix:keySuffix:)","abstract":"<p>Extract a suffix into a new child node and mark this as terminal</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC7diverge6prefix9keySuffix06searchG0ACSS_S2StF":{"name":"diverge(prefix:keySuffix:searchSuffix:)","abstract":"<p>Extract a suffix into a new child node and add another suffix as child node</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC6insertySb5added_AC4nodetSSF":{"name":"insert(_:)","abstract":"<p>Insert a new string into this node</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC6removeyySSF":{"name":"remove(_:)","abstract":"<p>Remove a string from this node if present, and prune leaf nodes if present</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC4findyACSgSSF":{"name":"find(_:)","abstract":"<p>Return the node which marks the end of a given string if present</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC6searchySaySSGSSF":{"name":"search(_:)","abstract":"<p>Return an array with every inserted string in this node, the given prefix prepended</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC5match_7patternSaySSGSS_SStF":{"name":"match(_:pattern:)","abstract":"<p>Return an array with every inserted string in this node that match the given pattern, the given prefix prepended</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Test equality of two nodes, respecting only the label</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC1loiySbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Test order of two nodes, respecting only the label</p>","parent_name":"Node"},"Classes/Node.html#/s:7HangMan4NodeC4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Hash this node, respecting only its label</p>","parent_name":"Node"},"Classes/Node.html":{"name":"Node","abstract":"<p>A radix tree node</p>"},"Classes/Radix.html":{"name":"Radix","abstract":"<p>A radix tree that stores strings</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}