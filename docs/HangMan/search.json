{"Structs/SortedSet.html#/s:7Hangman9SortedSetV14CollectionTypea":{"name":"CollectionType","abstract":"<p>The type of the wrapped collection which holds the elements</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVACyxGycfc":{"name":"init()","abstract":"<p>create an empty sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV12arrayLiteralACyxGxd_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Create a sorted set from an array literal, sorting its content</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV11descriptionSSvp":{"name":"description","abstract":"<p>A textual description of the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV16debugDescriptionSSvp":{"name":"debugDescription","abstract":"<p>A textual description of the SortedSet (for debugging)</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:Sl5IndexQa":{"name":"Index","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV10startIndexSivp":{"name":"startIndex","abstract":"<p>The position of the first element in the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV8endIndexSivp":{"name":"endIndex","abstract":"<p>The position after the last element in the SortedSet</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV5index5afterS2i_tF":{"name":"index(after:)","abstract":"<p>The position after the given index</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV5index6beforeS2i_tF":{"name":"index(before:)","abstract":"<p>The position before the given index</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVyxSicip":{"name":"subscript(_:)","abstract":"<p>Accesses the element at the given position</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVys10ArraySliceVyxGSnySiGcip":{"name":"subscript(_:)","abstract":"<p>Accesses a contiguous subrange of the array’s elements</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:Sl7isEmptySbvp":{"name":"isEmpty","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV5index2ofSb5found_SiADtx_tF":{"name":"index(of:)","abstract":"<p>Return the index of the given element using binary search</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV8containsySbxF":{"name":"contains(_:)","abstract":"<p>Indicate if the given element is contained in the sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV3minxSgyF":{"name":"min()","abstract":"<p>Return the minimum element in the sorted set, its first element</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV3maxxSgyF":{"name":"max()","abstract":"<p>Return the maximum element in the sorted set, its last element</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6insertySb8inserted_x17memberAfterInserttxF":{"name":"insert(_:)","abstract":"<p>Insert an element into the sorted set if not already present</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6update4withxSgx_tF":{"name":"update(with:)","abstract":"<p>Insert an element inconditionally</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6removeyxSgxF":{"name":"remove(_:)","abstract":"<p>Remove an element from a sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6remove2atxSgSi_tF":{"name":"remove(at:)","abstract":"<p>Remove the element at a given position</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV6filteryACyxGSbxXEF":{"name":"filter(_:)","abstract":"<p>Return a sorted set containing the elements of this set that satisfy the given predicate</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV5unionyACyxGAEF":{"name":"union(_:)","abstract":"<p>Return a new sorted set containing the elements of this and another set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV9formUnionyyACyxGF":{"name":"formUnion(_:)","abstract":"<p>Add the elements of the given sorted set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV12intersectionyACyxGAEF":{"name":"intersection(_:)","abstract":"<p>Return a new set containing the elements that are common to this and the given set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV16formIntersectionyyACyxGF":{"name":"formIntersection(_:)","abstract":"<p>Removes the elements of this set that aren’t also in the given set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV19symmetricDifferenceyACyxGAEF":{"name":"symmetricDifference(_:)","abstract":"<p>Return a new set with the elements that are either in this or in the given set, but not in both</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetV23formSymmetricDifferenceyyACyxGF":{"name":"formSymmetricDifference(_:)","abstract":"<p>Removes the elements of the set that are also in the given set and adds the members of the given set that are not already in the set</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVAASeRzSERzrlE4fromACyxGs7Decoder_p_tKcfc":{"name":"init(from:)","abstract":"<p>Creates a sorted set by decoding from the given decoder</p>","parent_name":"SortedSet"},"Structs/SortedSet.html#/s:7Hangman9SortedSetVAASeRzSERzrlE6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","abstract":"<p>Encode a sorted set into the given encoder</p>","parent_name":"SortedSet"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV10vocabularyAA5RadixVvp":{"name":"vocabulary","abstract":"<p>The player&rsquo;s vocabulary</p>","parent_name":"RandomPlayer"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV10vocabularyAcA5RadixV_tcfc":{"name":"init(vocabulary:)","abstract":"<p>Initialize a new player with a given vocabulary</p>","parent_name":"RandomPlayer"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV4deal4withAA9BegriffixV4MoveVSgAG_tF":{"name":"deal(with:)","abstract":"<p>Undocumented</p>","parent_name":"RandomPlayer"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV5match_5placeSaySSGAA9BegriffixV_AA5PlaceVtF":{"name":"match(_:place:)","abstract":"<p>Find the words that could be inserted at the given place</p>","parent_name":"RandomPlayer"},"Structs/RandomPlayer.html#/s:7Hangman12RandomPlayerV6select4fromAA9BegriffixV4MoveVSgSDyAA5PlaceVSaySSGG_tF":{"name":"select(from:)","abstract":"<p>Select a move from valid places and their words</p>","parent_name":"RandomPlayer"},"Structs/Radix.html#/s:7Hangman5RadixVyAcA4NodeCcfc":{"name":"init(_:)","abstract":"<p>Create a tree with a given root node</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixVACycfc":{"name":"init()","abstract":"<p>Create an empty tree</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixV6insertyySSF":{"name":"insert(_:)","abstract":"<p>Insert a string into the tree</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixV6insertyyxSTRzSS7ElementRtzlF":{"name":"insert(_:)","abstract":"<p>Insert the elements of a given sequence into the tree</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixV6insert4text9separatorySS_SJtF":{"name":"insert(text:separator:)","abstract":"<p>Split a string by whitespace and insert the fragments into the tree</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixV6removeyySSF":{"name":"remove(_:)","abstract":"<p>Remove a given string from this tree if present</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixV8containsySbSSF":{"name":"contains(_:)","abstract":"<p>Indicate if a given string is present in the tree</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixV6searchSaySSGyF":{"name":"search()","abstract":"<p>Return a new array with the strings in this tree</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixV5matchySaySSGSSF":{"name":"match(_:)","abstract":"<p>Return a new array with the strings in this tree that satisfy the given pattern</p>","parent_name":"Radix"},"Structs/Radix.html#/s:7Hangman5RadixV11descriptionSSvp":{"name":"description","abstract":"<p>The textual representation of the root node</p>","parent_name":"Radix"},"Structs/Position.html#/s:7Hangman8PositionV1iSivp":{"name":"i","abstract":"<p>The matrix indices for row (i) and column (j)</p>","parent_name":"Position"},"Structs/Position.html#/s:7Hangman8PositionV1jSivp":{"name":"j","parent_name":"Position"},"Structs/Position.html#/s:7Hangman8PositionVyACSi_Sitcfc":{"name":"init(_:_:)","abstract":"<p>Create a position with given indices</p>","parent_name":"Position"},"Structs/Position.html#/s:7Hangman8PositionV11descriptionSSvp":{"name":"description","abstract":"<p>A textual representation as i:j</p>","parent_name":"Position"},"Structs/Position.html#/s:7Hangman8PositionVyACSgSScfc":{"name":"init(_:)","abstract":"<p>Initialize a position from a description</p>","parent_name":"Position"},"Structs/Position.html#/s:7Hangman8PositionV12arrayLiteralACSid_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Initialize a position from an array literal with 2 elements</p>","parent_name":"Position"},"Structs/Place.html#/s:7Hangman5PlaceV5startAA8PositionVvp":{"name":"start","abstract":"<p>The 2D position where the word starts</p>","parent_name":"Place"},"Structs/Place.html#/s:7Hangman5PlaceV9directionAA9DirectionOvp":{"name":"direction","abstract":"<p>The writing direction</p>","parent_name":"Place"},"Structs/Place.html#/s:7Hangman5PlaceV5countSivp":{"name":"count","abstract":"<p>The word length</p>","parent_name":"Place"},"Structs/Place.html#/s:7Hangman5PlaceV5start9direction5countAcA8PositionV_AA9DirectionOSitcfc":{"name":"init(start:direction:count:)","abstract":"<p>Return all positions that this place would occupy on a board</p>","parent_name":"Place"},"Structs/Place.html#/s:7Hangman5PlaceV9positionsSayAA8PositionVGyF":{"name":"positions()","abstract":"<p>Undocumented</p>","parent_name":"Place"},"Structs/Place.html#/s:7Hangman5PlaceV6kernelAA6MatrixVySiGyF":{"name":"kernel()","abstract":"<p>Return a matrix according to this place in direction and length</p>","parent_name":"Place"},"Structs/Place.html#/s:7Hangman5PlaceV5linesSnySiG_SityF":{"name":"lines()","abstract":"<p>Return the range of lines that would be crossed by this place</p>","parent_name":"Place"},"Structs/Matrix.html#/s:7Hangman6MatrixV14CollectionTypea":{"name":"CollectionType","abstract":"<p>The type of the collection which is used internally for the matrix entries</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV4Sizea":{"name":"Size","abstract":"<p>A type which keeps track of matrix dimensions and 1D indices</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV4sizeAA10DimensionsVvp":{"name":"size","abstract":"<p>The matrix dimensions</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVyACyxGSaySayxGGcfc":{"name":"init(_:)","abstract":"<p>Create matrix from nested arrays</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV9repeating4sizeACyxGx_AA10DimensionsVtcfc":{"name":"init(repeating:size:)","abstract":"<p>Create matrix with given size and prefill with repeating value</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV_4sizeACyxGSayxG_AA10DimensionsVtcfc":{"name":"init(_:size:)","abstract":"<p>Create matrix from simple array and given size</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV5Indexa":{"name":"Index","abstract":"<p>The collection index type</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV10startIndexSivp":{"name":"startIndex","abstract":"<p>The first 1D index</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV8endIndexSivp":{"name":"endIndex","abstract":"<p>The last 1D index</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVyxSicip":{"name":"subscript(_:)","abstract":"<p>Access a matrix element at a given 1D index</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV5index5afterS2i_tF":{"name":"index(after:)","abstract":"<p>Return the 1D index after a given 1D index</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV5index6beforeS2i_tF":{"name":"index(before:)","abstract":"<p>Return the 1D index before a given 1D index</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVyxAA8PositionVcip":{"name":"subscript(_:)","abstract":"<p>Return the matrix element at a given position</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV3rows5SliceVyACyxGGSi_tcip":{"name":"subscript(row:)","abstract":"<p>Return the elements in a given matrix row as slice</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV6columnSayxGSi_tcip":{"name":"subscript(column:)","abstract":"<p>Return the elements at a given column index as array</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVySays5SliceVyACyxGGGAA8PositionV_AA10DimensionsVtcip":{"name":"subscript(_:_:)","abstract":"<p>Return a matrix slice with a given size and reference position</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVyACyxGAA8PositionV_AA10DimensionsVtcip":{"name":"subscript(_:_:)","abstract":"<p>Return a matrix slice with given size and start position as matrix</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVySayxGAA5PlaceVcip":{"name":"subscript(_:)","abstract":"<p>Subscript a matrix with given place</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixV4map2yACyqd__Gqd__xXESHRd__lF":{"name":"map2(_:)","abstract":"<p>Transform the matrix element with a given closure and return them as new matrix</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzrlE1moiyACyxGAE_AEtFZ":{"name":"*(_:_:)","abstract":"<p>Elementwise matrix multiplication</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzrlE5conv2yACyxGAEF":{"name":"conv2(_:)","abstract":"<p>2D convolution with numeric elements</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzrlE6extendyACyxGAEF":{"name":"extend(_:)","abstract":"<p>Extend conv2 matrix with a given kernel</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzrlE6dilateyACyxGAEF":{"name":"dilate(_:)","abstract":"<p>Extend and dilate conv2 matrix with a given kernel</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASjRzrlE6invert3maxACyxGx_tF":{"name":"invert(max:)","abstract":"<p>Recode the matrix values by subtracting them from a given maximum value</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASJSgRszrlE11descriptionSSvp":{"name":"description","abstract":"<p>A textual description of a game board</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASJSgRszrlEyACyADGSgSScfc":{"name":"init(_:)","abstract":"<p>Create a game matrix from a string</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASJSgRszrlE5words_5linesSaySaySSGGAA9DirectionO_SnySiGSgtF":{"name":"words(_:lines:)","abstract":"<p>Return the words written on the board</p>","parent_name":"Matrix"},"Structs/Matrix.html#/s:7Hangman6MatrixVAASJSgRszrlE5words_5lines6aroundSaySSGAA9DirectionO_SnySiGSgSiSgtF":{"name":"words(_:lines:around:)","abstract":"<p>Return the words written on the board</p>","parent_name":"Matrix"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV1mSivp":{"name":"m","abstract":"<p>The number of rows (m) and columns (n) in the matrix</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV1nSivp":{"name":"n","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV5countSivp":{"name":"count","abstract":"<p>The number of elements in a grid with this size</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsVyACSi_Sitcfc":{"name":"init(_:_:)","abstract":"<p>Create dimensions with given extends</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsVyACSicfc":{"name":"init(_:)","abstract":"<p>Create a size for a square shaped grid with a given sidelength</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsVyAcA9DirectionO_Sitcfc":{"name":"init(_:_:)","abstract":"<p>Initialize a dimension from a direction and length</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV8containsySbAA8PositionVF":{"name":"contains(_:)","abstract":"<p>Indicates if the given position is in the matrix bounds</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV5indexySiAA8PositionVF":{"name":"index(_:)","abstract":"<p>Return the 1D index corresponding to a grid position</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV5index3rowSnySiGSi_tF":{"name":"index(row:)","abstract":"<p>Return the 1D indices of a given row index</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV5index6columns8StrideToVySiGSi_tF":{"name":"index(column:)","abstract":"<p>Return the 1D indices of a given column index</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV5index_4sizeSaySnySiGGAA8PositionV_ACtF":{"name":"index(_:size:)","abstract":"<p>Return the corresponding 1D indices of a partial grid with a given size</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV8positionyAA8PositionVSiF":{"name":"position(_:)","abstract":"<p>Return a 2D grid position corresponding to a 1D index</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV9enumerateyyyAA8PositionVXEF":{"name":"enumerate(_:)","abstract":"<p>Loop through all row and column indices and execute a closure with the positions</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV1loiySbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Indicates if a grid size fits into another grid size","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV1poiyA2C_ACtFZ":{"name":"+(_:_:)","abstract":"<p>Add two dimensions</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV1soiyA2C_ACtFZ":{"name":"-(_:_:)","abstract":"<p>Subtract a dimension from another</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV1poiyA2C_SitFZ":{"name":"+(_:_:)","abstract":"<p>Add a dimension and a scalar</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV1soiyA2C_SitFZ":{"name":"-(_:_:)","abstract":"<p>Subtract a scalar from a dimension</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV11descriptionSSvp":{"name":"description","abstract":"<p>A textual representation as m:n</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsVyACSgSScfc":{"name":"init(_:)","abstract":"<p>Initialize from a description</p>","parent_name":"Dimensions"},"Structs/Dimensions.html#/s:7Hangman10DimensionsV12arrayLiteralACSid_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Initialize from an array literal</p>","parent_name":"Dimensions"},"Structs/Begriffix/Phase.html#/s:7Hangman9BegriffixV5PhaseO10RestrictedyAeA9DirectionOcAEmF":{"name":"Restricted(_:)","abstract":"<p>Players must write words with at least four characters, starting player must write horizontally, and opponent must write vertically</p>","parent_name":"Phase"},"Structs/Begriffix/Phase.html#/s:7Hangman9BegriffixV5PhaseO7LiberalyA2EmF":{"name":"Liberal","abstract":"<p>Any words and directions are allowed</p>","parent_name":"Phase"},"Structs/Begriffix/Phase.html#/s:7Hangman9BegriffixV5PhaseO8KnockOutyA2EmF":{"name":"KnockOut","abstract":"<p>not yet implemented</p>","parent_name":"Phase"},"Structs/Begriffix/Move.html#/s:7Hangman9BegriffixV4MoveV5placeAA5PlaceVvp":{"name":"place","abstract":"<p>The place where the word should be written</p>","parent_name":"Move"},"Structs/Begriffix/Move.html#/s:7Hangman9BegriffixV4MoveV4wordSSvp":{"name":"word","abstract":"<p>The word to write in this move</p>","parent_name":"Move"},"Structs/Begriffix/Move.html#/s:7Hangman9BegriffixV4MoveV6placesSDyAA5PlaceVSaySSGGSgvp":{"name":"places","abstract":"<p>The collection which the move has been selected from</p>","parent_name":"Move"},"Structs/Begriffix/Move.html#/s:7Hangman9BegriffixV4MoveV5place4word6placesAeA5PlaceV_SSSDyAJSaySSGGSgtcfc":{"name":"init(place:word:places:)","abstract":"<p>Initialize a move with given values</p>","parent_name":"Move"},"Structs/Begriffix/Move.html":{"name":"Move","abstract":"<p>A begriffix move</p>","parent_name":"Begriffix"},"Structs/Begriffix/Phase.html":{"name":"Phase","abstract":"<p>game phases depending on the progress</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV12startLettersSays12StaticStringVGvpZ":{"name":"startLetters","abstract":"<p>Some human-generated start letters</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BoardGameP5board0B0Qzvp":{"name":"board","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman10DyadicGameP7starterAA6Player_pvp":{"name":"starter","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman10DyadicGameP8opponentAA6Player_pvp":{"name":"opponent","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BoardGameP4turnSivp":{"name":"turn","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BoardGameP6playerAA6Player_pvp":{"name":"player","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV5endedSbvp":{"name":"ended","abstract":"<p>Indicates if the game has ended</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV5phaseAC5PhaseOvp":{"name":"phase","abstract":"<p>The current game phase which is derived from turn</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV12startLetters7starter8opponentACSaySaySJSgGG_AA6Player_pAaJ_ptcfc":{"name":"init(startLetters:starter:opponent:)","abstract":"<p>Initialize a new begriffix game with given players</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV4nextAC_AC4MoveVtSgyF":{"name":"next()","abstract":"<p>Advance the game for one move</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV4scan9direction5countSayAA8PositionVGAA9DirectionO_SitF":{"name":"scan(direction:count:)","abstract":"<p>Return every position where words with given direction and length could be inserted</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV5words12orthogonalTo4wordSaySSGAA5PlaceV_SStF":{"name":"words(orthogonalTo:word:)","abstract":"<p>Return the words crossing the given place after inserting a given word</p>","parent_name":"Begriffix"},"Structs/Begriffix.html#/s:7Hangman9BegriffixV8contains5placeSbAA5PlaceV_tF":{"name":"contains(place:)","abstract":"<p>Indicate if the given place is usable</p>","parent_name":"Begriffix"},"Structs/Begriffix.html":{"name":"Begriffix","abstract":"<p>A begriffix game</p>"},"Structs/Dimensions.html":{"name":"Dimensions","abstract":"<p>The size of a 2D grid</p>"},"Structs/Matrix.html":{"name":"Matrix","abstract":"<p>A generic matrix type</p>"},"Structs/Place.html":{"name":"Place","abstract":"<p>A place on a game board, where a word can be written</p>"},"Structs/Position.html":{"name":"Position","abstract":"<p>A position in a matrix</p>"},"Structs/Radix.html":{"name":"Radix","abstract":"<p>A radix tree that stores strings</p>"},"Structs/RandomPlayer.html":{"name":"RandomPlayer","abstract":"<p>A Begriffix player</p>"},"Structs/SortedSet.html":{"name":"SortedSet","abstract":"<p>A collection of unique elements which keeps itself sorted</p>"},"Protocols/Player.html#/s:7Hangman6PlayerP4deal4withAA9BegriffixV4MoveVSgAG_tF":{"name":"deal(with:)","abstract":"<p>Undocumented</p>","parent_name":"Player"},"Protocols/DyadicGame.html#/s:7Hangman10DyadicGameP7starterAA6Player_pvp":{"name":"starter","abstract":"<p>The player who starts the game</p>","parent_name":"DyadicGame"},"Protocols/DyadicGame.html#/s:7Hangman10DyadicGameP8opponentAA6Player_pvp":{"name":"opponent","abstract":"<p>The responding player</p>","parent_name":"DyadicGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP0B0Qa":{"name":"Board","abstract":"<p>A type that can act as a game board</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP4MoveQa":{"name":"Move","abstract":"<p>The move type of a game</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP5board0B0Qzvp":{"name":"board","abstract":"<p>A game board where values can be entered</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP4turnSivp":{"name":"turn","abstract":"<p>The turn counter</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html#/s:7Hangman9BoardGameP6playerAA6Player_pvp":{"name":"player","abstract":"<p>The current player</p>","parent_name":"BoardGame"},"Protocols/BoardGame.html":{"name":"BoardGame","abstract":"<p>A type that can act as a board game</p>"},"Protocols/DyadicGame.html":{"name":"DyadicGame","abstract":"<p>A type that can act as a dyadic board game</p>"},"Protocols/Player.html":{"name":"Player","abstract":"<p>Undocumented</p>"},"Extensions/RandomAccessCollection.html#/s:Sk7HangmanSJSg7ElementRtzSi5IndexRtzrlE4word6aroundSSSgSi_tF":{"name":"word(around:)","abstract":"<p>Find the word in a sequence around a given index (nil if less than 3 letters)</p>","parent_name":"RandomAccessCollection"},"Extensions/Sequence.html#/s:ST7HangmanSj7ElementRpzrlE3sumACyF":{"name":"sum()","abstract":"<p>Return the sum of all elements in a numeric sequence</p>","parent_name":"Sequence"},"Extensions/Sequence.html#/s:ST7HangmanSj7ElementRpzrlE1moiySayACGx_xtFZ":{"name":"*(_:_:)","abstract":"<p>Multiply two sequences elementwise</p>","parent_name":"Sequence"},"Extensions/Sequence.html#/s:ST7HangmanSj7ElementRpzrlE7prodSum3lhs3rhsACx_xtFZ":{"name":"prodSum(lhs:rhs:)","abstract":"<p>Multiply two sequences elementwise and sum up the products</p>","parent_name":"Sequence"},"Extensions/Sequence.html#/s:ST7HangmanSJSg7ElementRtzrlE5wordsSaySSGyF":{"name":"words()","abstract":"<p>Find the words in a sequence (at least 3 letters), separated by nil</p>","parent_name":"Sequence"},"Extensions/String/Divergence.html#/s:SS7HangmanE10DivergenceO4fullyA2CmF":{"name":"full","abstract":"<p>No common prefix</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html#/s:SS7HangmanE10DivergenceO4noneyA2CmF":{"name":"none","abstract":"<p>strings are completely equal</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html#/s:SS7HangmanE10DivergenceO4leftyACSs_tcACmF":{"name":"left(suffix:)","abstract":"<p>The right string is a prefix of the left</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html#/s:SS7HangmanE10DivergenceO5rightyACSs_tcACmF":{"name":"right(suffix:)","abstract":"<p>The left string is a prefix of the right</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html#/s:SS7HangmanE10DivergenceO6partlyyACSs_S2stcACmF":{"name":"partly(prefix:leftSuffix:rightSuffix:)","abstract":"<p>Left and right string have a common prefix</p>","parent_name":"Divergence"},"Extensions/String/Divergence.html":{"name":"Divergence","abstract":"<p>Possible degrees of divergence</p>","parent_name":"String"},"Extensions/String.html#/s:SS7HangmanE1roiySSAAE10DivergenceOSS_SStFZ":{"name":"%(_:_:)","abstract":"<p>Return the degree of divergence of two given strings</p>","parent_name":"String"},"Extensions/String.html#/s:SS7HangmanE1doiySs_S2stSS_SStFZ":{"name":"/(_:_:)","abstract":"<p>Return the common prefix of two strings and their diverging suffixes</p>","parent_name":"String"},"Extensions/String.html#/s:SS7HangmanE7matchesySbSSF":{"name":"matches(_:)","abstract":"<p>Indicate if the string matches a given pattern</p>","parent_name":"String"},"Extensions/String.html":{"name":"String"},"Extensions/Sequence.html":{"name":"Sequence"},"Extensions/RandomAccessCollection.html":{"name":"RandomAccessCollection"},"Enums/Direction.html#/s:7Hangman9DirectionO10HorizontalyA2CmF":{"name":"Horizontal","abstract":"<p>From left to right</p>","parent_name":"Direction"},"Enums/Direction.html#/s:7Hangman9DirectionO8VerticalyA2CmF":{"name":"Vertical","abstract":"<p>from top to bottom</p>","parent_name":"Direction"},"Enums/Direction.html#/s:7Hangman9DirectionO6kernelyAA6MatrixVySiGSiF":{"name":"kernel(_:)","abstract":"<p>Return a kernel according to this direction and a given length</p>","parent_name":"Direction"},"Enums/Direction.html#/s:7Hangman9DirectionO7toggledACyF":{"name":"toggled()","abstract":"<p>The opposite of this direction</p>","parent_name":"Direction"},"Enums/Direction.html#/s:7Hangman9DirectionO6toggleyyF":{"name":"toggle()","abstract":"<p>Set this direction to its opposite</p>","parent_name":"Direction"},"Enums/Direction.html":{"name":"Direction","abstract":"<p>The direction on a right-angled grid</p>"},"Classes/Node/CodingKeys.html#/s:7Hangman4NodeC10CodingKeysO5labelyA2EmF":{"name":"label","abstract":"<p>The key for the label property</p>","parent_name":"CodingKeys"},"Classes/Node/CodingKeys.html#/s:7Hangman4NodeC10CodingKeysO5levelyA2EmF":{"name":"level","abstract":"<p>The key for the level property</p>","parent_name":"CodingKeys"},"Classes/Node/CodingKeys.html#/s:7Hangman4NodeC10CodingKeysO10isTerminalyA2EmF":{"name":"isTerminal","abstract":"<p>The key for the isTerminal property</p>","parent_name":"CodingKeys"},"Classes/Node/CodingKeys.html#/s:7Hangman4NodeC10CodingKeysO8childrenyA2EmF":{"name":"children","abstract":"<p>The key for the children property</p>","parent_name":"CodingKeys"},"Classes/Node.html#/s:7Hangman4NodeC12ChildrenTypea":{"name":"ChildrenType","abstract":"<p>The type of the child nodes collection</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC5labelSSvp":{"name":"label","abstract":"<p>The prefix of this node</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC5levelSivp":{"name":"level","abstract":"<p>The tree depth of this node</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC10isTerminalSbvp":{"name":"isTerminal","abstract":"<p>Indicates if this node contains the suffix of an inserted string</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC6isLeafSbvp":{"name":"isLeaf","abstract":"<p>////////// Indicates if the node contains any child nodes</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC5label5level10isTerminal8childrenACSS_SiSbAA9SortedSetVyACGtcfc":{"name":"init(label:level:isTerminal:children:)","abstract":"<p>Create a node</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC_5level10isTerminalACSS_SiSbtcfc":{"name":"init(_:level:isTerminal:)","abstract":"<p>Create a leaf node</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC_5levelACSS_Sitcfc":{"name":"init(_:level:)","abstract":"<p>Create a non-terminal leaf node</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeCACycfc":{"name":"init()","abstract":"<p>Create a root node</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC3add6prefixACSS_tF":{"name":"add(prefix:)","abstract":"<p>Add a child node with given prefix</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC5split6prefix9keySuffixACSS_SStF":{"name":"split(prefix:keySuffix:)","abstract":"<p>Extract a suffix into a new child node and mark this as terminal</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC7diverge6prefix9keySuffix06searchF0ACSS_S2StF":{"name":"diverge(prefix:keySuffix:searchSuffix:)","abstract":"<p>Extract a suffix into a new child node and add another suffix as child node</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC6insertySb5added_AC4nodetSSF":{"name":"insert(_:)","abstract":"<p>Insert a new string into this node</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC6removeyySSF":{"name":"remove(_:)","abstract":"<p>Remove a string from this node if present, and prune leaf nodes if present</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC4findyACSgSSF":{"name":"find(_:)","abstract":"<p>Return the node which marks the end of a given string if present</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC6searchySaySSGSSF":{"name":"search(_:)","abstract":"<p>Return an array with every inserted string in this node, the given prefix prepended</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC5match_7patternSaySSGSS_SStF":{"name":"match(_:pattern:)","abstract":"<p>Return an array with every inserted string in this node that match the given pattern, the given prefix prepended</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC2eeoiySbAC_ACtFZ":{"name":"==(_:_:)","abstract":"<p>Test equality of two nodes, respecting only the label</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC1loiySbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Test order of two nodes, respecting only the label</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC4hash4intoys6HasherVz_tF":{"name":"hash(into:)","abstract":"<p>Hash this node, respecting only its label</p>","parent_name":"Node"},"Classes/Node/CodingKeys.html":{"name":"CodingKeys","abstract":"<p>The coding keys for serialization</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC4fromACs7Decoder_p_tKcfc":{"name":"init(from:)","abstract":"<p>Initialize a node from a decoder</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC6encode2toys7Encoder_p_tKF":{"name":"encode(to:)","abstract":"<p>Encode the node into an encoder</p>","parent_name":"Node"},"Classes/Node.html#/s:7Hangman4NodeC11descriptionSSvp":{"name":"description","abstract":"<p>A textual representation of the node</p>","parent_name":"Node"},"Classes/Node.html":{"name":"Node","abstract":"<p>A radix tree node</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}